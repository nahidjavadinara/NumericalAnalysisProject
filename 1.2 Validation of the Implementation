## 1.2 Validation of the Implementation

To validate the implementation, we define an exact solution:

$$
u_{\text{ex}}(x, y) = \sin^2(\pi x) \sin^2(\pi y)
$$

### Finding the Right-Hand Side \(f(x, y)\)

Taking the Laplacian of \(u_{\text{ex}}(x, y)\):

$$
\Delta u_{\text{ex}} = \frac{\partial^2 u_{\text{ex}}}{\partial x^2} + \frac{\partial^2 u_{\text{ex}}}{\partial y^2}.
$$

Compute the partial derivatives:

1. First derivative with respect to \(x\):
   $$
   \frac{\partial u_{\text{ex}}}{\partial x} = 2\sin(\pi x)\cos(\pi x)\sin^2(\pi y).
   $$

2. Second derivative with respect to \(x\):
   $$
   \frac{\partial^2 u_{\text{ex}}}{\partial x^2} = 2\pi^2\cos(2\pi x)\sin^2(\pi y).
   $$

3. Similarly, for \(y\):
   $$
   \frac{\partial^2 u_{\text{ex}}}{\partial y^2} = 2\pi^2\cos(2\pi y)\sin^2(\pi x).
   $$

Substituting into \(\Delta u_{\text{ex}}\) gives:

$$
f(x, y) = -\Delta u_{\text{ex}} = -2\pi^2\left(\cos(2\pi x)\sin^2(\pi y) + \cos(2\pi y)\sin^2(\pi x)\right).
$$

### Consistency with Boundary Conditions

The solution \(u_{\text{ex}}(x, y)\) satisfies the homogeneous Dirichlet boundary conditions:

$$
u(x, 0) = u(x, 1) = u(0, y) = u(1, y) = 0.
$$

### Numerical Validation

#### Relative Error and Convergence

Using a grid with \(N \times N\) points, solve the linear system for the numerical solution \(u_{\text{num}}\) and compute the relative error in the maximum norm:

$$
\text{Error} = \|u_{\text{num}} - u_{\text{ex}}\|_\infty.
$$

#### Convergence Plot

Generate a log-log plot of the error against the step size \(h = \frac{1}{N}\). The expected convergence rate for the second-order finite difference scheme is \(O(h^2)\).

```python
import numpy as np
import matplotlib.pyplot as plt

# Define step sizes and errors
step_sizes = [1/N for N in [10, 20, 40, 80]]
errors = [0.01, 0.0025, 0.000625, 0.00015625]  # Replace with computed errors

# Plot
plt.figure()
plt.loglog(step_sizes, errors, marker='o', label='Numerical Error')
plt.title('Convergence of Finite Difference Method')
plt.xlabel('Step size (h)')
plt.ylabel('Error (log scale)')
plt.legend()
plt.grid(True, which="both", linestyle="--")
plt.show()
